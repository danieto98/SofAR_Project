<launch>
  <!--TODO: find the tf between base_link and camera_rgb_optical_frame and create a static_transform_publisher with it-->

  <!--Start the rtabmap/rgbd_sync nodelet to synchronize rgbd images-->
  <node pkg="nodelet" type="nodelet" name="rgbd_sync" args="standalone rtabmap_ros/rgbd_sync" output="screen">
    <remap from="rgb/image"       to="rgb/image_raw"/>
    <remap from="depth/image"     to="depth_registered/image_raw"/>
    <param name="approx_sync"     type="bool"   value="true"/>
    <param name="queue_size"      type="int"    value="10"/>
    <param name="depth_scale"     type="double" value="1.0"/>
  </node>
  
  <!--Start the RGBD odometry node from rtabmap-->
  <node pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" output="screen" args="" launch-prefix="">
    <!--Remap input topic names-->
    <remap from="rgb/image"       to="rgb/image_raw"/>
    <remap from="depth/image"     to="depth_registered/image_raw"/>
    
    <!--Remap output topic name-->
    <remap from="odom"            to="rgbd/odom"/>

    <!--Don't publish a tf so that the odometry merger publishes it-->
    <param name="frame_id"                    type="string" value="base_link"/>
    <param name="odom_frame_id"               type="string" value="camera_rgb_optical_frame"/>
    <param name="publish_tf"                  type="bool"   value="false"/>
    
    <!--Set approximate synchronization of topics-->
    <param name="approx_sync"                 type="bool"   value="true"/>
    
    <!--Subscribe to rgbd_image topic (from rtabmap/rgbd_sync)-->
    <param name="subscribe_rgbd"              type="bool"   value="true"/>
    
    <!--Set these to defaults-->
    <remap from="imu"             to="/imu/data"/>
    <param name="ground_truth_frame_id"       type="string" value=""/>
    <param name="ground_truth_base_frame_id"  type="string" value=""/>
    <param name="wait_for_transform_duration" type="double" value="0.2"/>
    <param name="wait_imu_to_init"            type="bool"   value="false"/>
    <param name="config_path"                 type="string" value=""/>
    <param name="queue_size"                  type="int"    value="10"/>
    <param name="guess_frame_id"              type="string" value=""/>
    <param name="guess_min_translation"       type="double" value="0"/>
    <param name="guess_min_rotation"          type="double" value="0"/>
  </node>
  
  <!--Start the node to merge the two odometries-->
  <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <!--Change odometry input topic from wheel odometry to the one given by the Husqvarna driver-->
    <remap from="odom" to="robot/odom" />
    
    <!--Change odometry input topic from visual odometry to the one given by the RGBD odometry node-->
    <remap from="vo" to="rgbd/odom" />
    
    <!--Change odometry output topic to the one used by rtabmap-->
    <remap from="robot_pose_ekf/odom_combined" to="odom" />
    
    <!--Change output odometry frame to odom-->
    <param name="output_frame" value="odom" />
    
    <!--Change base_footprint frame to base_link-->
    <param name="base_footprint_frame" value="base_link"/>
    
    <!--Use default values-->
    <param name="freq" value="30.0" />
    <param name="sensor_timeout" value="1.0" />
    
    <!--Enable wheel and visual (RGBD) odometry-->
    <param name="odom_used" value="true" />
    <param name="imu_used" value="false" />
    <param name="vo_used" value="true" />
    
    <!--Disable debugging and diagnosis-->
    <param name="debug" value="false" />
    <param name="self_diagnose" value="false" />
  </node>
  
  <!--Start the rtabmap node-->
  <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="$(arg output)" args="$(arg rtabmap_args)" launch-prefix="$(arg launch_prefix)">
    <!--Subscribe only to depth, rgb and rgbd-->
    <param name="subscribe_depth"      type="bool"   value="true"/>
    <param name="subscribe_rgb"        type="bool"   value="true"/>
    <param name="subscribe_rgbd"       type="bool"   value="true"/>
    <param name="subscribe_stereo"     type="bool"   value="false"/>
    <param name="subscribe_scan"       type="bool"   value="false"/>
    <param name="subscribe_scan_cloud" type="bool"   value="false"/>
    <param name="subscribe_user_data"  type="bool"   value="false"/>
    <param name="subscribe_odom_info"  type="bool"   value="false"/>
    
    <!--Set tf frames (outputs tf from map to odom, which's transform to base_link will be provided by the odometry_merge node)-->
    <param name="frame_id"             type="string" value="base_link"/>
    <param name="map_frame_id"         type="string" value="map"/>
    <param name="odom_frame_id"        type="string" value="odom"/>
    <param name="publish_tf"           type="bool"   value="true"/>
    
    <!--Set approximate synchronization of topics-->
    <param name="approx_sync"          type="bool"   value="true"/>
    
    <!--Remap input topic names-->
    <remap from="rgb/image"       to="rgb/image_raw"/>
    <remap from="depth/image"     to="depth_registered/image_raw"/>

    <!--Disable localization-only mode-->
    <param name="Mem/IncrementalMemory" type="string" value="true"/>
    <param name="Mem/InitWMWithAllNodes" type="string" value="false"/>

    <!--Set defaults-->
    <param name="ground_truth_frame_id"       type="string" value=""/>
    <param name="ground_truth_base_frame_id"  type="string" value=""/>
    <param name="odom_tf_angular_variance" type="double" value="1"/>
    <param name="odom_tf_linear_variance"  type="double" value="1"/>
    <param name="odom_sensor_sync"         type="bool"   value="false"/>
    <param name="wait_for_transform_duration"  type="double"   value="0.2"/>
    <param name="database_path"        type="string" value=""~/.ros/rtabmap.db""/>
    <param name="config_path"          type="string" value=""/>
    <param name="queue_size"           type="int" value="10"/>
    <param name="scan_cloud_max_points"     type="int" value="0"/>
    <param name="landmark_linear_variance"   type="double" value="0.0001"/>
    <param name="landmark_angular_variance"  type="double" value="9999"/>
  </node>
  
  <!--Start the command_recognition node to listen for voice commands-->
  <node name="command_recognition" pkg="labeled_slam" type="command_recognition.py" />
  
  <!--Start the logic node-->
  <node name="logic" pkg="labeled_slam" type="logic_node" />
  
  <!--Start the activators-->
  <node name="activator1" pkg="labeled_slam" type="activator1_node" />
  <node name="activator2" pkg="labeled_slam" type="activator2_node" />
  
  <!--Start the velocity forwarder-->
  <node name="velocity_forwarder" pkg="labeled_slam" type="velocity_forwarder" />
  
  <!--Start the gesture-based controller node to control the robot with the watch-->
  <include file="$(find gesture-based-controller)/launch/hrp_gb_controller.launch">
    <!--Subscribe to IMU data from the smartwatch-->
    <arg name="inertial_sub_topic" value="/G_Watch_R_5567/imu_data" />
    <!--Change the published velocity topic so that it is captured by the activator and not sent directly to the Husqvarna driver-->
    <arg name="vel_pub_topic"  value="/gbc/cmd_vel" />
  </include>
</launch>